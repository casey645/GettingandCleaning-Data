my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
getwd()
ls()
wd()
ls(wd)
dir()
cd swirl
?cd
?mkdir
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
setwd(dir)= C:/Users/cwatkin/Documents/SWIRLAS"
dir.create(C:/Users/cwatkin/Documents/Rtest.dir)
dir.create(Rtest.dir)
dir.create()
dir.create(/Users/cwatkin/Documents)
create(testdir)
?dir.create
dir.exists(paths)
dir.exists
dir.create("testdir")
getwd()
setwd("SWIRLAS")
getwd()
skip()
swirl()
setwd("testdir")
file.create("mytest.R")
dir()
file.exists(dir)
file.exists()
?file.exists
file.exists(...)
file.exists("mytest.R")
bye
bye()
x<-4, TRUE)
x<-4  TRUE)
x<- 4  TRUE)
x<-4, TRUE)
c(x<-4,TRUE)
G<-c(x<-,TRUE)
G<-c(x<-,TRUE)
x<-c(4,TRUE)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4 + y <- 2:3
x <- 1:4
y <- 2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x == 0] <- 6
x
x[x %in% 1:5] <- 0
x
WatkinsHW1 <- read.delim("~/R_Coursera Files/WatkinsHW1.txt")
View(WatkinsHW1)
View(WatkinsHW1)
View(WatkinsHW1)
getwd
getwb()
getwd()
help(sort)
help(filter)
swirl()
bye()
swirl()
bye()
library("swirl")
rm(list=ls())
swirl()
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest2.R", "mytest3.R"= "C:Users/cwatkin/Documents")
info(file.path)
info("file.path")
info()
?file.path
file.path("testdir", fsep=C:Users/cwatkin/Documents")
file.path("testdir")
file.path("folder1", "folder2")
?dir.create
dir.create(getwd, "testdir2")
dir.create("testdir2")
dir.create("testdir2, "testdir3"), recursive = TRUE)
dir.create("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink(file.path('testdir2', recursive = TRUE)
unlink(file.path('testdir2', recursive = TRUE)
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive=FALSE, force=FALSE)
unlink("testdir", recursive=TRUE)
getwd()
setwd(SWIRLAS)
setwd("SWIRLAS")
getwd()
setwd(old.dir)
SWIRL.dir<-"C:/Users/cwatkin/Documents/SWIRLAS"
setwd(SWIRL.dir)
Coursera.dir<-"C:/Users/cwatkin/Documents/R_Cousera Files"
setwd(coursera.dir)
setwd("Coursera.dir")
setwd(Coursera.dir)
setwd('old.dir')
setwd(old.dir)
setwd(Coursera.dir)
swirl()
library(swirl)
swirl()
rep(o, times=40)
rep(0, times=40)
rep(c(0, 2, 2), times=40)
rep(c(0, 1, 2), times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
?num_vect
?info()
info()
info(num_vect)
info(numeric)
num_vect(0.5, 55, -10)
vect()
info(vector)
info(vector())
?"vector"
vector(0.5, 55,  -10, 6)
num_vect=c(0.5, 55, -10, 6)
c(0.5, 55, -10, 6)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect < 1
tf
num_vect < 6
num_vect >= 6
my_char<-chartr("My", "name", "is")
my_char<-c("My", "name", "is")
print(My_char)
print(my_char)
my_char
paste(my_char, collapse=" ")
c(my_char, "your_name_here")
paste(my_char, collapse=" ")
my_name<-c(my_char, "Casey645")
my_name
paste(my_char, my_name, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world", seep =" ")
paste("Hello", "world", seep ="")
paste("Hello", "world", sep ="")
paste("Hello", "world", sep =" ")
paste("Hello", "world!", sep =" ")
paste(1;3. "X", "Y", "Z", sep ="")
paste(1:3, "X", "Y", "Z", sep ="")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste("LETTERS", c(1:4), sep ="_")
paste("LETTERS", c(1:4), sep ="-")
paste("LETTERS", 1:4, sep ="-")
paste("LETTERS", c(1:4), sep = "-")
paste(LETTERS, c(1:4), sep = "-")
paste(LETTERS, 1:4, sep = "-")
bye()
sin(log(2.718281828)*pi)
x <- 3
y <- 4
z <- sqrt(x*x + y*y)
use.dots.in.names <- z - 5
print(z)
swirl
swirl()
library(translations)
library(swirl)
swirl
swirl()
bye()
add<- function(x, y) {
x +y
}
add2(3, 5)
bye()
add(3, 5)
add2<- function(x, y) {
x +y
}
add2(3, 5)
above <- function(x, n){
use x > n
x[use]
}
x < 1:20
add2<- function(x, y) {
x +y
}
# this is giving you any number above 10
# a logical vecto of trues and falses of which are or are not above 10
above10 <- function(x) {
use <- x>10
x[use]
}
#Extraction of a number
above <- function(x, n){
use x > n
x[use]
}
above <- function(x, n = 10){
use x > n
x[use]
}
above(x)
above <- function(x, n = 10){
use x > n
x[use]
}
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
x <- (1:20)
above(x)
bye()
exit
source('~/R_Coursera Files/Functions.R')
exit()
?exit
?
ls(environment(cube))
ls(environment(cube))
"n" "pwr"
ls(environment(cube))
make.pwr<-function(n)
{}
?optim
source('~/R_Coursera Files/Functions.R')
info(time)
?dates
?"date"
date()
if(x > 3) {
y <- 10
}
else
{
y <- 0
}
if(x > 3) {
10
}
else {
0
}
if(x > 3) {
10
}
else {
0
}
source('~/R_Coursera Files/Functions.R')
for(i in 1:10) {
print(i)
}
cube <- function(x, n) {
x^3
}
print(cube)
x<-2
print(cube)
cube
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source('~/R_Coursera Files/RAssign1/specdata/001.csv', encoding = 'UTF-8')
set.speed(1)
set.speed(1)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
library(datasets)
data(iris)
?iris
print(iris)
?mean()
mean('sepal.length', 101:150)
x<-c(101:150, 49)
xm <- mean(x)
xm
mean(iris('sepal.length', 101:150))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
> data(mtcars)
> mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
data(mtcars)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
ls(h)
library(swirl)
bye
bye()
`
library(swirl)
?1s
?ls()
esc
library(swirl)
swirl
library(swirl)
rm(list=ls())
swirl()
c(44, NA, 5, NA)
x<-c(44, NA, 5, NA)
x*3
bye()
library(swirl)
swirl
swirl()
y<-rnorm)(1000)
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na<-is.na(my_data)
print(my_na)
my_na
my_data == NA
sum(my_na)
print(my_data)
my_data
0/0
Inf-Inf
bye()
exit
quit
quit()
library()
swirl()
library(swirl)
swirl
swirl
library(swirl)
swirl()
bye()
library(swirl)
swirl
swirl()
?True
?==
True == TRUE
x == X
TRUE <-x
True == 1
?
info (==)
info(==)
info(True)
rue
True == 1
x <- c(1:10)
x
x>8
info()
TrUE == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!5 == 7
TRUE & TRUE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
bye()
install.packages("rfordummies")
rfordummies()
swirl
library(swirl)
library(rfordummies)
rfordummies()
rfordummies
swirl()
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file.dest <- 'ACS4.csv'
download.file(file.url, file.dest, method='curl')
# load the data
ACS <- read.csv(file.dest)
# extract names
names <- names(ACS)
# string split
strsplit(names, 'wgtp')[123]
data <- read.csv("./data/microdata.csv")
names(data)[123]
strsplit(names(data)[123], "wgtp")
# [[1]]
data <- read.csv("./data/microdata.csv")
names(data)[123]
strsplit(names(data)[123], "wgtp")
setwd("~/R_Coursera Files/GettingandCleaning-Data/Quiz4")
data <- read.csv("./data/microdata.csv")
names(data)[123]
strsplit(names(data)[123], "wgtp")
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file.dest <- 'ACS4.csv'
download.file(file.url, file.dest, method='curl')
# load the data
ACS <- read.csv(file.dest)
# extract names
names <- names(ACS)
# string split
strsplit(names, 'wgtp')[123]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]
data <- read.csv("./data/microdata.csv")
names(data)[123]
strsplit(names(data)[123], "wgtp")
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
countryNames <- gdpData[5:194,4]
regexec("^United", countryNames)
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
bool1 <- year(sampleTimes) == 2012
length(sampleTimes[bool1]) # 250
bool2 <- weekdays(sampleTimes)=="Monday"
length(sampleTimes[bool1 & bool2]) # 4
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
