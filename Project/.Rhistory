my_char
paste(my_char, collapse=" ")
c(my_char, "your_name_here")
paste(my_char, collapse=" ")
my_name<-c(my_char, "Casey645")
my_name
paste(my_char, my_name, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world", seep =" ")
paste("Hello", "world", seep ="")
paste("Hello", "world", sep ="")
paste("Hello", "world", sep =" ")
paste("Hello", "world!", sep =" ")
paste(1;3. "X", "Y", "Z", sep ="")
paste(1:3, "X", "Y", "Z", sep ="")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste("LETTERS", c(1:4), sep ="_")
paste("LETTERS", c(1:4), sep ="-")
paste("LETTERS", 1:4, sep ="-")
paste("LETTERS", c(1:4), sep = "-")
paste(LETTERS, c(1:4), sep = "-")
paste(LETTERS, 1:4, sep = "-")
bye()
sin(log(2.718281828)*pi)
x <- 3
y <- 4
z <- sqrt(x*x + y*y)
use.dots.in.names <- z - 5
print(z)
swirl
swirl()
library(translations)
library(swirl)
swirl
swirl()
bye()
add<- function(x, y) {
x +y
}
add2(3, 5)
bye()
add(3, 5)
add2<- function(x, y) {
x +y
}
add2(3, 5)
above <- function(x, n){
use x > n
x[use]
}
x < 1:20
add2<- function(x, y) {
x +y
}
# this is giving you any number above 10
# a logical vecto of trues and falses of which are or are not above 10
above10 <- function(x) {
use <- x>10
x[use]
}
#Extraction of a number
above <- function(x, n){
use x > n
x[use]
}
above <- function(x, n = 10){
use x > n
x[use]
}
above(x)
above <- function(x, n = 10){
use x > n
x[use]
}
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
x <- (1:20)
above(x)
bye()
exit
source('~/R_Coursera Files/Functions.R')
exit()
?exit
?
ls(environment(cube))
ls(environment(cube))
"n" "pwr"
ls(environment(cube))
make.pwr<-function(n)
{}
?optim
source('~/R_Coursera Files/Functions.R')
info(time)
?dates
?"date"
date()
if(x > 3) {
y <- 10
}
else
{
y <- 0
}
if(x > 3) {
10
}
else {
0
}
if(x > 3) {
10
}
else {
0
}
source('~/R_Coursera Files/Functions.R')
for(i in 1:10) {
print(i)
}
cube <- function(x, n) {
x^3
}
print(cube)
x<-2
print(cube)
cube
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source('~/R_Coursera Files/RAssign1/specdata/001.csv', encoding = 'UTF-8')
set.speed(1)
set.speed(1)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
library(datasets)
data(iris)
?iris
print(iris)
?mean()
mean('sepal.length', 101:150)
x<-c(101:150, 49)
xm <- mean(x)
xm
mean(iris('sepal.length', 101:150))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
> data(mtcars)
> mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
data(mtcars)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
ls(h)
library(swirl)
bye
bye()
`
library(swirl)
?1s
?ls()
esc
library(swirl)
swirl
library(swirl)
rm(list=ls())
swirl()
c(44, NA, 5, NA)
x<-c(44, NA, 5, NA)
x*3
bye()
library(swirl)
swirl
swirl()
y<-rnorm)(1000)
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na<-is.na(my_data)
print(my_na)
my_na
my_data == NA
sum(my_na)
print(my_data)
my_data
0/0
Inf-Inf
bye()
exit
quit
quit()
library()
swirl()
library(swirl)
swirl
swirl
library(swirl)
swirl()
bye()
library(swirl)
swirl
swirl()
?True
?==
True == TRUE
x == X
TRUE <-x
True == 1
?
info (==)
info(==)
info(True)
rue
True == 1
x <- c(1:10)
x
x>8
info()
TrUE == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!5 == 7
TRUE & TRUE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
bye()
setwd("~/R_Coursera Files/DataCleaning/Project")
## Libraries
library(dplyr)
## Load data
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
## Load features and activities
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE,col.names =c("ID","Activity"))
features   <- read.table("UCI HAR Dataset/features.txt",header = FALSE)
print("Finished loading data")
## Merge training and test data
x_merged <- rbind(x_train,x_test)
y_merged <- rbind(y_train,y_test)
subj_merged <- rbind(subj_train,subj_test)
rm(x_train,y_train,subj_train,x_test,y_test,subj_test)
print("Merged training and test data")
## Replace Activity labels and Features/Metrics in merged data
features[,2] <- gsub("\\(","",features[,2])
features[,2] <- gsub("\\)","",features[,2])
features[,2] <- gsub(",","-",features[,2])
subj_merged <- rename(subj_merged, Subject = V1)
colnames(x_merged) <- features[,2]
y_merged <- merge(y_merged,activities, by.x="V1",by.y="ID")
y_merged <- select(y_merged,Activity)
print("Finished cleaning")
## Subset only columns with mean or std
meanstd_columns <- names(x_merged[,grep("mean|std", names(x_merged))])
x_merged <- x_merged[,meanstd_columns]
## Combine all data and cleanup
tidy <- cbind(subj_merged, y_merged, x_merged)
rm(subj_merged, y_merged, x_merged, activities, features, meanstd_columns)
## Create tidy set with average of each variable by activity & subject (related: dplyr rocks!)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
## Write to file, all done!
write.table(tidy_average,"tidy_data.txt",row.names=FALSE)
library(dplyr)
install.packages("dplyr")
## This file contains the code necessary to complete the Course Project for Coursera's Getting and Cleaning Data course.
## File Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## Note: Please see README.md and CODEBOOK.md for more information
## Libraries
library(dplyr)
## Load data
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
## Load features and activities
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE,col.names =c("ID","Activity"))
features   <- read.table("UCI HAR Dataset/features.txt",header = FALSE)
print("Finished loading data")
## Merge training and test data
x_merged <- rbind(x_train,x_test)
y_merged <- rbind(y_train,y_test)
subj_merged <- rbind(subj_train,subj_test)
rm(x_train,y_train,subj_train,x_test,y_test,subj_test)
print("Merged training and test data")
## Replace Activity labels and Features/Metrics in merged data
features[,2] <- gsub("\\(","",features[,2])
features[,2] <- gsub("\\)","",features[,2])
features[,2] <- gsub(",","-",features[,2])
subj_merged <- rename(subj_merged, Subject = V1)
colnames(x_merged) <- features[,2]
y_merged <- merge(y_merged,activities, by.x="V1",by.y="ID")
y_merged <- select(y_merged,Activity)
print("Finished cleaning")
## Subset only columns with mean or std
meanstd_columns <- names(x_merged[,grep("mean|std", names(x_merged))])
x_merged <- x_merged[,meanstd_columns]
## Combine all data and cleanup
tidy <- cbind(subj_merged, y_merged, x_merged)
rm(subj_merged, y_merged, x_merged, activities, features, meanstd_columns)
## Create tidy set with average of each variable by activity & subject (related: dplyr rocks!)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
## Write to file, all done!
write.table(tidy_average,"tidy_data.txt",row.names=FALSE)
## This file contains the code necessary to complete the Course Project for Coursera's Getting and Cleaning Data course.
## File Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## Note: Please see README.md and CODEBOOK.md for more information
## Libraries
library(dplyr)
## Load data
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
## Load features and activities
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE,col.names =c("ID","Activity"))
features   <- read.table("UCI HAR Dataset/features.txt",header = FALSE)
print("Finished loading data")
## Merge training and test data
x_merged <- rbind(x_train,x_test)
y_merged <- rbind(y_train,y_test)
subj_merged <- rbind(subj_train,subj_test)
rm(x_train,y_train,subj_train,x_test,y_test,subj_test)
print("Merged training and test data")
## Replace Activity labels and Features/Metrics in merged data
features[,2] <- gsub("\\(","",features[,2])
features[,2] <- gsub("\\)","",features[,2])
features[,2] <- gsub(",","-",features[,2])
subj_merged <- rename(subj_merged, Subject = V1)
colnames(x_merged) <- features[,2]
y_merged <- merge(y_merged,activities, by.x="V1",by.y="ID")
y_merged <- select(y_merged,Activity)
print("Finished cleaning")
## Subset only columns with mean or std
meanstd_columns <- names(x_merged[,grep("mean|std", names(x_merged))])
x_merged <- x_merged[,meanstd_columns]
## Combine all data and cleanup
tidy <- cbind(subj_merged, y_merged, x_merged)
rm(subj_merged, y_merged, x_merged, activities, features, meanstd_columns)
## Create tidy set with average of each variable by activity & subject (related: dplyr rocks!)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
## Write to file, all done!
write.table(tidy_average,"tidy_data.txt",row.names=FALSE)
## This file contains the code necessary to complete the Course Project for Coursera's Getting and Cleaning Data course.
## File Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## Note: Please see README.md and CODEBOOK.md for more information
## Libraries
library(dplyr)
## Load data
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
## Load features and activities
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE,col.names =c("ID","Activity"))
features   <- read.table("UCI HAR Dataset/features.txt",header = FALSE)
print("Finished loading data")
## Merge training and test data
x_merged <- rbind(x_train,x_test)
y_merged <- rbind(y_train,y_test)
subj_merged <- rbind(subj_train,subj_test)
rm(x_train,y_train,subj_train,x_test,y_test,subj_test)
print("Merged training and test data")
## Replace Activity labels and Features/Metrics in merged data
features[,2] <- gsub("\\(","",features[,2])
features[,2] <- gsub("\\)","",features[,2])
features[,2] <- gsub(",","-",features[,2])
subj_merged <- rename(subj_merged, Subject = V1)
colnames(x_merged) <- features[,2]
y_merged <- merge(y_merged,activities, by.x="V1",by.y="ID")
y_merged <- select(y_merged,Activity)
print("Finished cleaning")
## Subset only columns with mean or std
meanstd_columns <- names(x_merged[,grep("mean|std", names(x_merged))])
x_merged <- x_merged[,meanstd_columns]
## Combine all data and cleanup
tidy <- cbind(subj_merged, y_merged, x_merged)
rm(subj_merged, y_merged, x_merged, activities, features, meanstd_columns)
## Create tidy set with average of each variable by activity & subject (related: dplyr rocks!)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
## Write to file, all done!
write.table(tidy_average,"tidy_data.txt",row.names=FALSE)
## This file contains the code necessary to complete the Course Project for Coursera's Getting and Cleaning Data course.
## File Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## Note: Please see README.md and CODEBOOK.md for more information
## Libraries
library(dplyr)
## Load data
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
## Load features and activities
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE,col.names =c("ID","Activity"))
features   <- read.table("UCI HAR Dataset/features.txt",header = FALSE)
print("Finished loading data")
## Merge training and test data
x_merged <- rbind(x_train,x_test)
y_merged <- rbind(y_train,y_test)
subj_merged <- rbind(subj_train,subj_test)
rm(x_train,y_train,subj_train,x_test,y_test,subj_test)
print("Merged training and test data")
## Replace Activity labels and Features/Metrics in merged data
features[,2] <- gsub("\\(","",features[,2])
features[,2] <- gsub("\\)","",features[,2])
features[,2] <- gsub(",","-",features[,2])
subj_merged <- rename(subj_merged, Subject = V1)
colnames(x_merged) <- features[,2]
y_merged <- merge(y_merged,activities, by.x="V1",by.y="ID")
y_merged <- select(y_merged,Activity)
print("Finished cleaning")
## Subset only columns with mean or std
meanstd_columns <- names(x_merged[,grep("mean|std", names(x_merged))])
x_merged <- x_merged[,meanstd_columns]
## Combine all data and cleanup
tidy <- cbind(subj_merged, y_merged, x_merged)
rm(subj_merged, y_merged, x_merged, activities, features, meanstd_columns)
## Create tidy set with average of each variable by activity & subject (related: dplyr rocks!)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
## Write to file, all done!
write.table(tidy_average,"tidy_data.txt",row.names=FALSE)
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
tidy_average <- summarise_each(group_by(tidy, Activity, Subject),funs(mean))
